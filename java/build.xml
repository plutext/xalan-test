<?xml version="1.0" encoding="utf-8"?>
<!-- 
/**
 * build.xml
 * Ant 1.2x build script for Xalan-J tests.  
 * @author shane_curcuru@lotus.com
 *
 */
-->

<project name="xslqetest" default="package.trax" basedir=".">

<!-- @see build.bat,build.sh for how to use this -->
<!-- The user should first setup system stuff in the CLASSPATH,
     like classes.zip, servlet.jar, and the JAVA_HOME env. var.
     build.bat/build.sh should then setup our other basic CLASSPATH
     dependencies: either from defaults of ../../java/bin, etc., 
     or from some user-specified JARDIR.

     For wrapper targets, the user must include any other JARS needed
     for the various wrappers, like xt.jar, xp.jar, ezx.jar, etc.
     Note, however, that pre-compiled .class files are already checked in 
     for some other wrappers. -->

    <!-- Note the name property may be overwritten when external 
         build.xml scripts call us via <ant>, thus creating a 
         differently-named output jar instead of 'testxsl' -->
    <property name="name" value="testxsl"/>
    <property name="testxsl.jar" value="${name}.jar"/>
    <property name="Name" value="Testxsl"/>
    <property name="version" value="3.0"/>
    <property name="year" value="2000"/>
    <property name="copyright" value="Copyright &#169; ${year} The Apache Software Foundation.  All rights reserved."/>

    <property name="build.compiler" value="classic"/>
    <property name="compiler" value="${build.compiler}"/>
    <property name="debug" value="on"/>

    <property name="src.dir" value="./src"/>
    <property name="test.root" value="/org/apache/qetest"/>
    <property name="test.dir" value="${src.dir}${test.root}"/>
    <property name="build.dir" value="./build"/>
    <property name="build.docs" value="${build.dir}/docs"/>
	<property name="build.apidocs" value="${build.docs}/apidocs"/>
    <property name="javadocs.packages" 
              value="org.apache.qetest,org.apache.qetest.xslwrapper,org.apache.qetest.xsl,org.apache.qetest.trax,org.apache.qetest.trax.dom,org.apache.qetest.trax.stream,org.apache.qetest.xalanj1"/>

    <property name="xdocs.dir" value="./xdocs"/>
    <property name="xdocs.book" value="${xdocs.dir}/sources/xalantest.xml"/>
    <property name="xdocs.style" value="${xdocs.dir}/style"/>

    <property name="xalan.xdocs" value="../../xdocs"/> <!--Xalan-J 1 for now -->
    <property name="doc.generator" value="org.apache.stylebook.StyleBook"/>
    <property name="xalan.generator.styletargz" value="${xalan.xdocs}/xml-site-style.tar.gz"/>
    <property name="xdocs.generator.styletar" value="${xdocs.dir}/xml-site-style.tar"/>

    <!-- For Minitest use, we need additional classpaths to add 
         the xalan.jar and related files on-the-fly. 
         External build.xml files may pass in new values for the 
         below prepend.class.path property when calling us with <ant> -->
    <property name="prepend.class.path" value="" />
    <path id="compiletest.class.path">
        <pathelement path="${prepend.class.path}" />
        <pathelement path="${java.class.path}" />
    </path>
    <path id="runminitest.class.path">
        <pathelement path="${build.dir}/${testxsl.jar}" />
        <pathelement path="${prepend.class.path}" />
        <pathelement path="${java.class.path}" />
    </path>

    <path id="runconftest.class.path">
        <pathelement path="${build.dir}/${testxsl.jar}" />
        <pathelement path="${prepend.class.path}" />
        <pathelement path="${java.class.path}" />
    </path>

    <path id="runexamplestest.class.path">
        <pathelement path="${build.dir}/${testxsl.jar}" />
        <pathelement path="${prepend.class.path}" />
        <pathelement path="${java.class.path}" />
    </path>

    <!-- Prepare output tree; copy over prebuilt classes -->
    <target name="prepare">
        <echo message="Classpath is ${java.class.path}" />
        <mkdir dir="${build.dir}" />
        <mkdir dir="${build.apidocs}" />
        <mkdir dir="${build.dir}${test.root}" />
        <!-- Also copy over precompiled external processor wrapper classes -->
        <copy todir="${build.dir}${test.root}/xslwrapper" >
            <fileset dir="${test.dir}/xslwrapper">
                <include name="**/*.class" />
                <include name="**/*.properties" />
            </fileset>
        </copy>
        
        <tstamp />
    </target>
	
	<target name="prepare.docs" depends="prepare">
	    <!-- get files from xml-site-style.tar.gz-->
	    <gunzip src="${xalan.generator.styletargz}" dest="${xdocs.generator.styletar}"/>
        <untar src="${xdocs.generator.styletar}" dest="${xdocs.dir}"/>
        <delete file="${xdocs.generator.styletar}"/>
	</target>

    <!-- =================================================================== -->
    <!-- Common worker targets for all builds                                -->
    <!-- =================================================================== -->
    <target name="compile.reporter" depends="prepare">
        <javac srcdir="${test.dir}" 
               destdir="${build.dir}" 
               includes="*.java" 
               debug="${debug}" />
    </target>

    <!-- Compile Processor-wrapper based tests; must also compile ProcessorWrapper itself -->
    <target name="compile.xsl" depends="compile.reporter">
        <javac srcdir="${test.dir}/xslwrapper" 
               destdir="${build.dir}" 
               includes="ProcessorWrapper.java"
               debug="${debug}" />
        <javac srcdir="${test.dir}/xsl" 
               destdir="${build.dir}" 
               debug="${debug}" 
               classpathref="compiletest.class.path" />
        <!-- Note use of compiletest.class.path above, in the case where 
             external build.xml scripts call us -->
    </target>
    <target name="package.xsl" depends="compile.xsl">
        <jar jarfile="${build.dir}/${testxsl.jar}" 
             basedir="${build.dir}" 
             includes="**/*.class,**/*.properties" />
    </target>

    <!-- =================================================================== -->
    <!-- For Xalan-J 1.x testing, use these targets -->
    <!-- =================================================================== -->
    <target name="compile.xalan1" depends="compile.xsl">
        <javac srcdir="${test.dir}/xslwrapper" 
               destdir="${build.dir}" 
               includes="XalanWrapper.java"
               debug="${debug}" />
        <javac srcdir="${test.dir}/xalanj1" 
               destdir="${build.dir}" 
               debug="${debug}" />
    </target>
    <target name="package.xalan1" depends="compile.xalan1"
            description="Build testxsl.jar for testing Xalan-J 1.x" >
        <jar jarfile="${build.dir}/${testxsl.jar}" 
             basedir="${build.dir}" 
             includes="**/*.class,**/*.properties" />
    </target>
    <!-- See comments for target minitest.xalan2 -->
    <target name="minitest.xalan1" depends="minitest-xalan1,minitest-report,minitest-not-pass,minitest-pass" 
            description="Run the Minitest for Xalan-J 1.x">
    </target>

    <!-- =================================================================== -->
    <!-- For Xalan-J 2.x testing, use these targets                          -->
    <!-- =================================================================== -->
    <target name="compile.trax" depends="compile.xsl">
        <javac srcdir="${test.dir}/xslwrapper" 
               destdir="${build.dir}" 
               includes="TraxWrapper.java"
               debug="${debug}" />
        <echo message="Do just base trax directory first" />
        <javac srcdir="${test.dir}/trax" 
               destdir="${build.dir}" 
               includes="*.java" 
               debug="${debug}" />
        <echo message="Do [dom|sax|stream] subdirectories as well" />
        <javac srcdir="${test.dir}/trax/stream" 
               destdir="${build.dir}" 
               debug="${debug}" />
        <javac srcdir="${test.dir}/trax/dom" 
               destdir="${build.dir}" 
               debug="${debug}" />
        <javac srcdir="${test.dir}/trax/sax" 
               destdir="${build.dir}" 
               debug="${debug}" />
    </target>
    <target name="package.trax" depends="compile.trax"
            description="Build testxsl.jar for testing Xalan-J 2.x" >
        <jar jarfile="${build.dir}/${testxsl.jar}" 
             basedir="${build.dir}" 
             includes="**/*.class,**/*.properties" />
    </target>
    <!-- Provide alternate names for the targets: currently, we're 
         focusing most Xalan-J 2.x testing just on the TRAX or 
         javax.xml.transform interface.  Later on, we should also 
         separately test the other Xalan-J 2.x API's! -->
    <target name="compile.xalan2" depends="compile.trax"></target>
    <target name="package.xalan2" depends="package.trax"
            description="Build testxsl.jar for testing Xalan-J 2.x" ></target>

    <!-- Call this target to compile and run the minitest against 
         a Xalan-J 2.x build you've built in the same xml-xalan tree.
         The logic is like so:
         - user or external file calls this target
         - dependencies are executed in order:
           - depends:minitest-xalan2 runs
             - minitest compiled, jar'd, and run
             - <available...> checks for the Minitest.Pass file that 
               the minitest only writes out if it passed
             - we (attempt) to style the result xml into html
           - depends:minitest-not-pass runs, but only if 
             minitest-passed is *not* set; it echos out 
             a brief message and then <fail...>s the build
           - depends:minitest-pass runs, but only if 
             minitest-passed *is* set; it echos out 
             a brief message and returns
         This is the best I can figure out do to with Ant's sometimes
         quirky way of doing targets, but it does work fine.
    -->     
    <target name="minitest.xalan2" depends="minitest-xalan2,minitest-report,minitest-not-pass,minitest-pass" 
            description="Run the Minitest for Xalan-J 2.x">
    </target>

    <target name="conftest.xalan2" depends="conftest-xalan2,conftest-report,conftest-not-pass,conftest-pass" 
            description="Run the Minitest for Xalan-J 2.x">
    </target>

    <!-- =================================================================== -->
    <!-- Worker targets to compile and run the minitest                      -->
    <!-- =================================================================== -->
    <target name="minitest-xalan1" depends="compile.xsl"> 
        <echo message=" [minitest] SORRY! minitest.xalan1 is not implemented yet!" />
    </target>
    <target name="minitest-xalan2">
        <property name="results.dir" value="../results-minitest" />
        <property name="results.xml" value="${results.dir}/Minitest.xml" />
        <property name="results.html" value="${results.dir}/Minitest.html" />
        <property name="results.marker" value="${results.dir}/Minitest.Pass" />
        <property name="tests.root" value="../tests" />
        <echo message=" [minitest] Compile the Minitest." />
        <javac srcdir="${test.dir}/trax" 
               destdir="${build.dir}" 
               includes="Minitest.java"
               debug="${debug}" 
               classpathref="compiletest.class.path" />

        <echo message=" [minitest] Jar the Minitest" />
        <jar jarfile="${build.dir}/${testxsl.jar}" 
             basedir="${build.dir}" 
             includes="**/*.class,**/*.properties" />

        <!-- Note that while the echo line below prints out the classpath 
             used for running the minitest with mixed / and \ characters, 
             the classpathref below correctly switches to the proper 
             path and file separators for your current platform. -->
        <echo message=" [minitest] Run the Minitest." />
        <java classname="org.apache.qetest.trax.Minitest"
              classpathref="runminitest.class.path"
              fork="no"
              failonerror="no">
            <!-- I can't get this to work without the fork="yes" statement 
                 above - if we are called from a build.xml that just jar'd
                 a xalan.jar, we get a wacky error trying to call any 
                 Xalan API's (can't unpack the jar file).
                 I think because I'm trying to change the classpath 
                 to include the xalan.jar that our calling build.xml may 
                 have just created in this same Ant session, and I bet 
                 the classloader gets confused somehow.
                 Hints, anyone?
            -->
            <arg value="-inputDir" />
            <arg path="${tests.root}/api" />
            <arg value="-goldDir" />
            <arg path="${tests.root}/api-gold" />
            <arg value="-outputDir" />
            <arg path="${results.dir}" />
            <arg value="-logFile" />
            <arg path="${results.xml}" />
            <arg value="-loggingLevel" />
            <arg value="5" />
        </java>
        <!-- Set properties for running other targets -->
        <available file="${results.marker}" property="minitest-passed" />
        <available classname="org.apache.tools.ant.taskdefs.optional.XalanLiaison" property="minitest-style" />
    </target>

    <!-- Common worker targets for other minitest targets to call -->
    <target name="minitest-report" if="minitest-style">
        <echo message=" [minitest] Create Minitest report" />
        <!-- I also can't get the style task to work, even after putting 
             the optional.jar in various locations and/or explicitly adding 
             it to the classpath in build.bat.  More hints, anyone?
        -->
        <style processor="xalan"
               style="../viewResults.xsl"
               basedir="${results.dir}"
               destdir="${results.dir}"
               includes="Minitest.xml" />
    </target>
    <target name="minitest-pass" if="minitest-passed">
        <echo message=" [minitest] CONGRATULATIONS! The Minitest passed!" />
        <echo message=" [minitest] See details in ${results.html}" />
    </target>
    <!-- Note: avoid the use of 'fail' in the target name, in case 
         any log-grepping tools are searching for this -->
    <target name="minitest-not-pass" unless="minitest-passed">
        <echo message=" [minitest] ERROR! The Minitest failed!" />
        <echo message=" [minitest] See details in ${results.xml} or ${results.html}" />
        <echo message=" [minitest] Please fix any Minitest problems before checking in!" />
        <fail message="Please fix any Minitest problems before checking in!" />
    </target>


    <!-- =================================================================== -->
    <!-- Worker targets to compile and run the conformance test              -->
    <!-- =================================================================== -->
    <target name="conftest-xalan1" depends="compile.xsl"> 
        <echo message=" [conftest] SORRY! conftest.xalan1 is not implemented yet!" />
    </target>
    <target name="conftest-xalan2">
        <property name="conftest-results.dir" value="../results-conftest" />
        <property name="conftest-results.xml" value="${conftest-results.dir}/ConformanceTest.xml" />
        <property name="conftest-results.html" value="${conftest-results.dir}/ConformanceTest.html" />
        <property name="conftest-results.marker" value="${conftest-results.dir}/ConformanceTest.Pass" />
        <property name="conftest-tests.root" value="../tests" />
        <echo message=" [conftest] Compile the ConformanceTest." />
        <javac srcdir="${test.dir}/trax" 
               destdir="${build.dir}" 
               includes="ConformanceTest.java"
               debug="${debug}" 
               classpathref="compiletest.class.path" />

        <echo message=" [conftest] Jar the ConformanceTest" />
        <jar jarfile="${build.dir}/${testxsl.jar}" 
             basedir="${build.dir}" 
             includes="**/*.class,**/*.properties" />

        <!-- Note that while the echo line below prints out the classpath 
             used for running the conftest with mixed / and \ characters, 
             the classpathref below correctly switches to the proper 
             path and file separators for your current platform. -->
        <echo message=" [conftest] Run the ConformanceTest." />
        <java classname="org.apache.qetest.xsl.ConformanceTest"
              classpathref="runconftest.class.path"
              fork="no"
              failonerror="yes">
            <!-- I can't get this to work without the fork="yes" statement 
                 above - if we are called from a build.xml that just jar'd
                 a xalan.jar, we get a wacky error trying to call any 
                 Xalan API's (can't unpack the jar file).
                 I think because I'm trying to change the classpath 
                 to include the xalan.jar that our calling build.xml may 
                 have just created in this same Ant session, and I bet 
                 the classloader gets confused somehow.
                 Hints, anyone?
            -->
            <arg value="-inputDir" />
            <arg path="${conftest-tests.root}/conf" />
            <arg value="-goldDir" />
            <arg path="${conftest-tests.root}/conf-gold" />
            <arg value="-outputDir" />
            <arg path="${conftest-results.dir}" />
            <arg value="-logFile" />
            <arg path="${conftest-results.xml}" />
            <arg value="-loggingLevel" />
            <arg value="5" />
            <arg value="-flavor" />
            <arg value="trax" />
            <!-- arg value="-category" />
            <arg value="whitespace" / -->
            <arg value="-noErrTest" />
            <arg value="true" />
			<arg value="-excludes"/>
            <arg value="impincl12.xsl" />
            <arg value="-fileChecker" />
            <arg value="org.apache.qetest.xsl.XHTFileCheckService" />
        </java>
        <!-- Set properties for running other targets -->
        <available file="${conftest-results.marker}" property="conftest-passed" />
    </target>

    <!-- Common worker targets for other conftest targets to call -->
    <target name="conftest-report" if="conftest-style">
        <echo message=" [conftest] Create ConformanceTest report" />
        <!-- I also can't get the style task to work, even after putting 
             the optional.jar in various locations and/or explicitly adding 
             it to the classpath in build.bat.  More hints, anyone?
        -->
        <style processor="xalan"
               style="../viewResults.xsl"
               basedir="${conftest-results.dir}"
               destdir="${conftest-results.dir}"
               includes="ConformanceTest.xml" />
    </target>
    <target name="conftest-pass" if="conftest-passed">
        <echo message=" [conftest] CONGRATULATIONS! The ConformanceTest passed!" />
        <echo message=" [conftest] See details in ${conftest-results.html}" />
    </target>
    <!-- Note: avoid the use of 'fail' in the target name, in case 
         any log-grepping tools are searching for this -->
    <target name="conftest-not-pass" unless="conftest-passed">
        <echo message=" [conftest] ERROR! The ConformanceTest failed!" />
        <echo message=" [conftest] See details in ${conftest-results.xml} or ${conftest-results.html}" />
        <echo message=" [conftest] Please fix any ConformanceTest problems before checking in!" />
        <fail message="Please fix any ConformanceTest problems before checking in!" />
    </target>

    <!-- =================================================================== -->
    <!-- Worker targets to compile and run the examples test              -->
    <!-- =================================================================== -->
    <target name="examplestest-xalan1" depends="compile.xsl"> 
        <echo message=" [examplestest] SORRY! examplestest.xalan1 is not implemented yet!" />
    </target>
    <target name="examplestest-xalan2">
        <property name="examplestest-results.dir" value="../results-examplestest" />
        <property name="examplestest-results.xml" value="${results.dir}/ExamplesTest.xml" />
        <property name="examplestest-results.html" value="${results.dir}/ExamplesTest.html" />
        <property name="examplestest-results.marker" value="${results.dir}/ExamplesTest.Pass" />
        <property name="examplestest-tests.root" value="../tests" />
        <echo message=" [examplestest] Compile the ExamplesTest." />
        <javac srcdir="${test.dir}/trax" 
               destdir="${build.dir}" 
               includes="ExamplesTest.java"
               debug="${debug}" 
               classpathref="compiletest.class.path" />

        <echo message=" [examplestest] Jar the ExamplesTest" />
        <jar jarfile="${build.dir}/${testxsl.jar}" 
             basedir="${build.dir}" 
             includes="**/*.class,**/*.properties" />

        <!-- Note that while the echo line below prints out the classpath 
             used for running the examplestest with mixed / and \ characters, 
             the classpathref below correctly switches to the proper 
             path and file separators for your current platform. -->
        <echo message=" [examplestest] Run the ExamplesTest." />
        <java classname="org.apache.qetest.trax.ExamplesTest"
              classpathref="runexamplestest.class.path"
              fork="no"
              failonerror="no">
            <!-- I can't get this to work without the fork="yes" statement 
                 above - if we are called from a build.xml that just jar'd
                 a xalan.jar, we get a wacky error trying to call any 
                 Xalan API's (can't unpack the jar file).
                 I think because I'm trying to change the classpath 
                 to include the xalan.jar that our calling build.xml may 
                 have just created in this same Ant session, and I bet 
                 the classloader gets confused somehow.
                 Hints, anyone?
            -->
            <arg value="-inputDir" />
            <arg path="${examplestest-tests.root}/api" />
            <arg value="-goldDir" />
            <arg path="${examplestest-tests.root}/api-gold" />
            <arg value="-outputDir" />
            <arg path="${examplestest-results.dir}" />
            <arg value="-logFile" />
            <arg path="${examplestest-results.xml}" />
            <arg value="-loggingLevel" />
            <arg value="50" />
            <arg value="-flavor" />
            <arg value="trax" />
            <arg value="-noErrTest" />
            <arg value="true" />
            <arg value="-fileChecker" />
            <arg value="org.apache.qetest.xsl.XHTFileCheckService" />
        </java>
        <!-- Set properties for running other targets -->
        <available file="${examplestest-results.marker}" property="examplestest-passed" />
        <available classname="org.apache.tools.ant.taskdefs.optional.XalanLiaison" property="examplestest-style" />
    </target>

    <!-- Common worker targets for other examplestest targets to call -->
    <target name="examplestest-report" if="examplestest-style">
        <echo message=" [examplestest] Create ExamplesTest report" />
        <!-- I also can't get the style task to work, even after putting 
             the optional.jar in various locations and/or explicitly adding 
             it to the classpath in build.bat.  More hints, anyone?
        -->
        <style processor="xalan"
               style="../viewResults.xsl"
               basedir="${results.dir}"
               destdir="${results.dir}"
               includes="ExamplesTest.xml" />
    </target>
    <target name="examplestest-pass" if="examplestest-passed">
        <echo message=" [examplestest] CONGRATULATIONS! The ExamplesTest passed!" />
        <echo message=" [examplestest] See details in ${examplestest-results.html}" />
    </target>
    <!-- Note: avoid the use of 'fail' in the target name, in case 
         any log-grepping tools are searching for this -->
    <target name="examplestest-not-pass" unless="examplestest-passed">
        <echo message=" [examplestest] ERROR! The ExamplesTest failed!" />
        <echo message=" [examplestest] See details in ${examplestest-results.xml} or ${examplestest-results.html}" />
        <echo message=" [examplestest] Please fix any ExamplesTest problems before checking in!" />
        <fail message="Please fix any ExamplesTest problems before checking in!" />
    </target>

    <!-- =================================================================== -->
    <!-- Run a general smoke test composed of other tests                    -->
    <!-- =================================================================== -->
	<target name="smoketest-xalan2" 
	        depends="conftest-xalan2, minitest-xalan2, examplestest-xalan2, 
	        conftest-report,conftest-not-pass,conftest-pass,
	        minitest-report,minitest-not-pass,minitest-pass,
	        examplestest-report,examplestest-not-pass,examplestest-pass"/>


    <!-- =================================================================== -->

    <!-- All wrappers; requires competitor's jars in the classpath, as appropriate
         (You may be better off compiling other wrappers by hand, and then simply 
         checking in their .class files instead) -->
    <target name="compile.xslwrapper.wrappers" depends="prepare">
        <javac srcdir="${test.dir}/xslwrapper" 
                destdir="${build.dir}" 
                debug="${debug}" />
    </target>

    <target name="clean">
        <delete dir="${build.dir}"/>
		<delete dir="${xdocs.style}"/> <!--prepare.docs creates this tree-->
    </target>
	
    <!-- =================================================================== -->
    <!-- Creates the User's Guide                                            -->
    <!-- =================================================================== -->
    <target name="docs" depends="prepare.docs"
            description="Build the framework/overview docs for tests">
    <!-- Note: temporarily add the Xalan-J 1.x version of stylebook to classpath 
         this needs more work, since we can build docs with either Xalan 1 or 2, 
         but the matching version of stylebook needs to go with the xalan.jar -->
    <java fork="yes" classname="${doc.generator}"> 
        <classpath>
            <pathelement location="${xalan.xdocs}/stylebook-1.0-b2.jar" />
            <pathelement path="${java.class.path}" />
        </classpath>
        <arg line="targetDirectory=${build.docs} ${xdocs.book} ${xdocs.style}"/>    
    </java>
  </target>

    <!-- =================================================================== -->
    <!-- Creates the API documentation                                       -->
    <!-- =================================================================== -->
    <target name="javadocs" depends="prepare"
            description="Build the Javadocs for tests">
        <javadoc
             sourcepath="${src.dir}"
             destdir="${build.apidocs}"
             packagenames="${javadocs.packages}"
             public="true"
             author="true"
             version="true"
             use="true"
             windowtitle="${Name}" 
             doctitle="${Name}"
             bottom="${copyright}"
        />
    </target>

</project>
