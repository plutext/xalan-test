<?xml version="1.0" encoding="utf-8"?>
<!-- 
/**
 * build.xml
 * Ant 1.2x build script for Xalan-J tests.  
 * @author shane_curcuru@lotus.com
 *
 */
-->

<project name="xslqetest" default="package.trax" basedir=".">

<!-- @see build.bat,build.sh for how to use this -->
<!-- The user should first setup system stuff in the CLASSPATH,
     like classes.zip, servlet.jar, and the JAVA_HOME env. var.
     build.bat/build.sh should then setup our other basic CLASSPATH
     dependencies: either from defaults of ../../java/bin, etc., 
     or from some user-specified JARDIR.

     For wrapper targets, the user must include any other JARS needed
     for the various wrappers, like xt.jar, xp.jar, ezx.jar, etc.
     Note, however, that pre-compiled .class files are already checked in 
     for some other wrappers. -->

    <!-- Note the testxsl.jar property may be overwritten when external 
         build.xml scripts call us via <ant>, thus creating a 
         differently-named output jar instead of 'testxsl' -->
    <property name="testxsl.jar.name" value="testxsl.jar"/>
    <property name="qetest.jar.name" value="qetest.jar"/>
    <property name="name" value="testxsl"/>
    <property name="Name" value="Testxsl"/>
    <property name="version" value="3.0"/>
    <property name="year" value="2000-2001"/>
    <property name="copyright" value="Copyright &#169; ${year} The Apache Software Foundation.  All rights reserved."/>

    <property name="build.compiler" value="classic"/>
    <property name="compiler" value="${build.compiler}"/>
    <property name="debug" value="on"/>

    <property name="src.dir" value="./src"/>
    <property name="test.root" value="org/apache/qetest/"/>
    <property name="test.dir" value="${src.dir}/${test.root}"/>
    <property name="build.dir" value="./build"/>
    <property name="build.docs" value="${build.dir}/docs"/>
	<property name="build.apidocs" value="${build.docs}/apidocs"/>
    <property name="javadocs.packages" 
              value="org.apache.qetest,org.apache.qetest.xslwrapper,org.apache.qetest.xsl,org.apache.qetest.trax,org.apache.qetest.trax.dom,org.apache.qetest.trax.stream,org.apache.qetest.xalanj1"/>

    <property name="xdocs.dir" value="./xdocs"/>
    <property name="xdocs.book" value="${xdocs.dir}/sources/xalantest.xml"/>
    <property name="xdocs.style" value="${xdocs.dir}/style"/>

    <!--Xalan-J 2 -->
    <property name="xalan.xdocs" value="../../java/xdocs"/>
    <property name="xalan.bin.dir" value="../../java/bin"/> 
    <property name="xalan.build.dir" value="../../java/build"/> 
 
    <property name="doc.generator" value="org.apache.stylebook.StyleBook"/>
    <property name="xalan.generator.styletargz" value="${xalan.xdocs}/xml-site-style.tar.gz"/>
    <property name="xdocs.generator.styletar" value="${xdocs.dir}/xml-site-style.tar"/>
    <property name="compat.jar.name" value="../../java/build/xalanj1compat.jar" />

    <!-- Flags used when executing tests; provided as properties 
         here so that they may be overriden either by calling ant 
         files, or on the commandline via -Dname=value
    -->
    <property name="test.loggingLevel" value="99"/>
    <property name="test.excludes" value=""/>
    <property name="test.embedded" value="embed01.xsl;embed02.xsl;embed07.xsl"/>
    <property name="test.flavor" value="trax"/>
    <property name="tests.root" value="../tests" />
    <!-- Note: instead of hard-coding these values here, we could 
         instead read them in from a .properties file like so:
         &lt;property file="build-xml.properties" &gt;
    -->

    <!-- For use when executing tests, we need additional classpaths 
         to add the xalan.jar and related files on-the-fly. 
         External build.xml files may pass in new values for the 
         below prepend.class.path property when calling us with <ant>
    -->
    <property name="prepend.class.path" value="" />
    <path id="compiletest.class.path">
        <pathelement path="${prepend.class.path}" />
        <pathelement path="${java.class.path}" />
    </path>
    <!-- Used when compiling Xalan-J 1.x tests explicitly against
         Xalan-J 2.x with it's compat.jar 
    -->
    <path id="compattest.class.path">
        <pathelement path="${compat.jar.name}" />
        <pathelement path="${prepend.class.path}" />
        <pathelement path="${java.class.path}" />
    </path>
    <path id="runminitest.class.path">
        <pathelement path="${build.dir}/${testxsl.jar.name}" />
        <pathelement path="${prepend.class.path}" />
        <pathelement path="${java.class.path}" />
    </path>

    <path id="runconftest.class.path">
        <pathelement path="${build.dir}/${testxsl.jar.name}" />
        <pathelement path="${prepend.class.path}" />
        <pathelement path="${java.class.path}" />
    </path>

    <path id="runapitests.class.path">
        <pathelement path="${build.dir}/${testxsl.jar.name}" />
        <pathelement path="${prepend.class.path}" />
        <pathelement path="${java.class.path}" />
    </path>

    <!-- =================================================================== -->
    <!-- Simple target to execute basic API tests from Ant                   -->
    <!-- =================================================================== -->
    <taskdef name="xalantest" classname="org.apache.qetest.xsl.XSLTestAntTask">
        <classpath>
            <pathelement path="${build.dir}/${testxsl.jar.name}" />
            <pathelement path="${prepend.class.path}" />
            <pathelement path="${java.class.path}" />
            <!-- Needed so this build file can run: this refers to 
                 a precompiled version of XSLTestAntTask.class that 
                 is checked in: normally at runtime, it should come 
                 from the testxsl.jar file instead of below.
            -->
            <pathelement path="${src.dir}" />
        </classpath>
    </taskdef>
    <!-- A cheap target to allow you to execute a single API test 
         using Ant.  This defaults to the Minitest, however you may 
         simply override the ${testname} property on the command 
         line like so:
         build apitest -Dtestname=FooTest
    -->
    <property name="testname" value="org.apache.qetest.trax.Minitest" />
    <target name="apitest">
        <echo message="Executing Xalan API test: ${testname}" />
        <xalantest test="${testname}"
            inputDir="${tests.root}/api"
            goldDir="${tests.root}/api-gold"
            outputDir="../results-api"
            logFile="../results-api/results.xml"
            loggingLevel="${test.loggingLevel}"
            consoleLoggingLevel="30"
            classpathref="runapitests.class.path"
            fork="${fork-tests}"
            failonerror="yes" />
    </target>

    <!-- Prepare output tree; copy over prebuilt classes -->
    <target name="prepare">
        <echo message="Classpath is ${java.class.path}" />
        <mkdir dir="${build.dir}" />
        <mkdir dir="${build.apidocs}" />
        <mkdir dir="${build.dir}/${test.root}" />
        <!-- Also copy over precompiled external processor wrapper classes -->
        <copy todir="${build.dir}/${test.root}/xslwrapper" >
            <fileset dir="${test.dir}xslwrapper">
                <include name="**/*.class" />
                <include name="**/*.properties" />
            </fileset>
        </copy>
        
        <tstamp />
        <!-- Note this is used in various targets that execute tests. -->
        <available classname="org.apache.tools.ant.taskdefs.optional.XalanLiaison" property="xalan-liaison" />
    </target>
	
	<target name="prepare.docs" depends="prepare">
	    <!-- get files from xml-site-style.tar.gz-->
	    <gunzip src="${xalan.generator.styletargz}" dest="${xdocs.generator.styletar}"/>
        <untar src="${xdocs.generator.styletar}" dest="${xdocs.dir}"/>
        <delete file="${xdocs.generator.styletar}"/>
	</target>

    <!-- =================================================================== -->
    <!-- Common worker targets for all builds                                -->
    <!-- =================================================================== -->
    <!-- Compile just the qetest stuff alone; has no Xalan dependencies -->
    <target name="compile.reporter" depends="prepare">
        <javac srcdir="${src.dir}" 
               destdir="${build.dir}" 
               includes="${test.root}*.java" 
               debug="${debug}" />
    </target>

    <!-- Package just the qetest stuff alone; has no Xalan dependencies -->
    <target name="package.reporter" depends="compile.reporter">
        <jar jarfile="${build.dir}/${qetest.jar.name}" 
             basedir="${build.dir}" 
             includes="${test.root}*.java,${test.root}*.properties" />
    </target>

    <!-- Compile Processor-wrapper based tests; must also compile TransformWrapper itself -->
    <!-- This should only be dependent on JAXP, SAX, DOM, and in 
         theory should not depend directly on Xalan-J -->

    <target name="compile.xsl" depends="compile.reporter">
        <javac srcdir="${src.dir}" 
               destdir="${build.dir}" 
               includes="${test.root}xslwrapper/ProcessorWrapper.java,${test.root}xslwrapper/TransformWrapperHelper.java,${test.root}xslwrapper/TransformWrapper.java,${test.root}xslwrapper/TransformWrapperFactory.java"
               debug="${debug}" />
        <javac srcdir="${src.dir}" 
               destdir="${build.dir}" 
               includes="${test.root}xsl/*.java"
               debug="${debug}" 
               classpathref="compiletest.class.path" />
        <!-- Note use of compiletest.class.path above, in the case where 
             external build.xml scripts call us -->
    </target>
    <target name="package.xsl" depends="compile.xsl">
        <jar jarfile="${build.dir}/${testxsl.jar.name}" 
             basedir="${build.dir}" 
             includes="**/*.class,**/*.properties" />
    </target>

    <!-- =================================================================== -->
    <!-- For Xalan-J 1.x testing, use these targets -->
    <!-- =================================================================== -->
    <target name="compile.xalan1" depends="compile.xsl">
        <javac srcdir="${src.dir}" 
               destdir="${build.dir}" 
               includes="${test.root}xslwrapper/XalanWrapper.java"
               debug="${debug}" />
        <javac srcdir="${src.dir}" 
               destdir="${build.dir}" 
               includes="${test.root}xalanj1/*.java"
               debug="${debug}" />
    </target>
    <target name="package.xalan1" depends="compile.xalan1"
            description="Build testxsl.jar for testing Xalan-J 1.x" >
        <jar jarfile="${build.dir}/${testxsl.jar.name}" 
             basedir="${build.dir}" 
             includes="**/*.class,**/*.properties" />
    </target>
    <!-- See comments for target minitest.xalan2 -->
    <target name="minitest.xalan1" depends="minitest-xalan1,minitest-report,minitest-not-pass,minitest-pass" 
            description="Run the Minitest for Xalan-J 1.x">
    </target>

    <!-- =================================================================== -->
    <!-- For Xalan-J 2.x compatibilty testing, use these targets -->
    <!-- This compiles the Xalan-J 1.x tests against Xalan-J 2.x 
         using compat.jar that provides backwards compatibility. -->
    <!-- =================================================================== -->
    <target name="compile.compat1" depends="compile.xsl">
        <javac srcdir="${src.dir}" 
               destdir="${build.dir}" 
               includes="${test.root}xslwrapper/XalanWrapper.java"
               debug="${debug}" 
               classpathref="compattest.class.path" />
        <javac srcdir="${src.dir}" 
               destdir="${build.dir}" 
               includes="${test.root}xalanj1/*.java"
               debug="${debug}" 
               classpathref="compattest.class.path" />
        <!-- Note this may not support being called externally yet -->
    </target>
    <target name="package.compat1" depends="compile.compat1"
            description="Build testxsl.jar for testing Xalan-J 2.x/1.x compatibility" >
        <jar jarfile="${build.dir}/${testxsl.jar.name}" 
             basedir="${build.dir}" 
             includes="**/*.class,**/*.properties" />
    </target>

    <!-- =================================================================== -->
    <!-- For Xalan-J 2.x testing, use these targets                          -->
    <!-- =================================================================== -->
    <!-- Just compile any xslwrappers related to trax: note naming 
         convention of Trax*Wrapper -->
    <target name="compile.trax.xslwrappers" depends="compile.xsl">
        <javac srcdir="${src.dir}" 
               destdir="${build.dir}" 
               includes="${test.root}xslwrapper/Trax*Wrapper.java,${test.root}xslwrapper/TraxWrapperUtils.java"
               debug="${debug}"
               classpathref="compiletest.class.path" />
    </target>

    <!-- Compile various TRAX related API tests -->
    <target name="compile.trax" depends="compile.xsl,compile.trax.xslwrappers">
        <echo message="Do just base trax directory first due to compiler oddities" />
        <javac srcdir="${src.dir}" 
               destdir="${build.dir}" 
               includes="${test.root}trax/*.java"
               debug="${debug}"
               classpathref="compiletest.class.path" />
        <javac srcdir="${src.dir}" 
               destdir="${build.dir}" 
               includes="${test.root}trax/stream/*.java"
               debug="${debug}"
               classpathref="compiletest.class.path" />
        <javac srcdir="${src.dir}" 
               destdir="${build.dir}" 
               includes="${test.root}trax/dom/*.java"
               debug="${debug}"
               classpathref="compiletest.class.path" />
        <javac srcdir="${src.dir}" 
               destdir="${build.dir}" 
               includes="${test.root}trax/sax/*.java"
               debug="${debug}"
               classpathref="compiletest.class.path" />
    </target>
    <target name="package.trax" depends="compile.trax"
            description="Build testxsl.jar for testing Xalan-J 2.x" >
        <jar jarfile="${build.dir}/${testxsl.jar.name}" 
             basedir="${build.dir}" 
             includes="**/*.class,**/*.properties" />
    </target>
    <!-- Provide alternate names for the targets: currently, we're 
         focusing most Xalan-J 2.x testing just on the TRAX or 
         javax.xml.transform interface.  Later on, we should also 
         separately test the other Xalan-J 2.x API's! -->
    <target name="compile.xalan2" depends="compile.trax"></target>
    <target name="package.xalan2" depends="package.trax"
            description="Build testxsl.jar for testing Xalan-J 2.x" ></target>

    <!-- Call this target to compile and run the minitest against 
         a Xalan-J 2.x build you've built in the same xml-xalan tree.
         The logic is like so:
         - user or external file calls this target
         - dependencies are executed in order:
           - depends:minitest-xalan2 runs
             - minitest compiled, jar'd, and run
             - <available...> checks for the Minitest.Pass file that 
               the minitest only writes out if it passed
             - we (attempt) to style the result xml into html
           - depends:minitest-not-pass runs, but only if 
             minitest-passed is *not* set; it echos out 
             a brief message and then <fail...>s the build
           - depends:minitest-pass runs, but only if 
             minitest-passed *is* set; it echos out 
             a brief message and returns
         This is the best I can figure out do to with Ant's sometimes
         quirky way of doing targets, but it does work fine.
    -->     
    <target name="minitest.xalan2" depends="minitest-xalan2,minitest-report,minitest-not-pass,minitest-pass" 
            description="Run the Minitest for Xalan-J 2.x">
    </target>

    <target name="conftest.xalan2" depends="conftest-xalan2,conftest-report,conftest-not-pass,conftest-pass" 
            description="Run the Minitest for Xalan-J 2.x">
    </target>

    <!-- =================================================================== -->
    <!-- Worker targets to compile and run the minitest                      -->
    <!-- =================================================================== -->

    <!-- Note: the below property allows users to override the 
         default of fork=yes when we call java to execute tests.
         Depending on your OS you may need to override this on 
         the command line with -Dfork-tests=no
    -->
    <property name="fork-tests" value="yes" />

    <target name="minitest-xalan1" depends="compile.xsl"> 
        <echo message=" [minitest] SORRY! minitest.xalan1 is not implemented yet!" />
    </target>
    <!-- Must have at least depends="compile.xsl" below, otherwise 
         tests won't build from a clean tree -->
    <target name="minitest-xalan2" depends="compile.xsl" >
        <property name="results.dir" value="../results-minitest" />
        <property name="results.xml" value="${results.dir}/Minitest.xml" />
        <property name="results.html" value="${results.dir}/Minitest.html" />
        <!-- Coordinate results.marker with Reporter.writeResultsStatus(true) -->
        <property name="results.marker" value="${results.dir}/Pass-Minitest.xml" />
        <echo message=" [minitest] Compile the Minitest." />
        <javac srcdir="${test.dir}trax" 
               destdir="${build.dir}" 
               includes="Minitest.java"
               debug="${debug}" 
               classpathref="compiletest.class.path" />

        <echo message=" [minitest] Jar the Minitest" />
        <jar jarfile="${build.dir}/${testxsl.jar.name}" 
             basedir="${build.dir}" 
             includes="**/*.class,**/*.properties" />

        <!-- Note that while the echo line below prints out the classpath 
             used for running the minitest with mixed / and \ characters, 
             the classpathref below correctly switches to the proper 
             path and file separators for your current platform. -->
        <echo message=" [minitest] Run the Minitest." />
        <java classname="org.apache.qetest.trax.Minitest"
              classpathref="runminitest.class.path"
              fork="${fork-tests}"
              failonerror="no">
            <!-- 
            I can't get this to work without the fork="yes" statement 
            above - if we are called from a build.xml that just jar'd
            a xalan.jar, we get a wacky error trying to call any 
            Xalan API's (can't unpack the jar file):
            "java.io.EOFException: Unexpected end of ZLIB input stream"
            I think because I'm trying to change the classpath 
            to include the xalan.jar that our calling build.xml may 
            have just created in this same Ant session, and I bet 
            the classloader gets confused somehow.
            Hints, anyone?
            The only drawback may be on some systems that the 
            forked output goes to a different window, but since 
            you should be using the results.xml files to check the 
            status of your tests anyway, that's just an annoyance.
            Unfortunately on Win9X systems, fork=yes causes the 
            tests to fail as well, apparently with a command line 
            that's too long.  Not sure what we should do about this.
            -->
            <arg value="-inputDir" />
            <arg path="${tests.root}/api" />
            <arg value="-goldDir" />
            <arg path="${tests.root}/api-gold" />
            <arg value="-outputDir" />
            <arg path="${results.dir}" />
            <arg value="-logFile" />
            <arg path="${results.xml}" />
            <arg value="-loggingLevel" />
            <arg value="${test.loggingLevel}" />
        </java>
        <!-- Set properties for running other targets -->
        <available file="${results.marker}" property="minitest-passed" />
    </target>

    <!-- Common worker targets for other minitest targets to call -->
    <target name="minitest-report" if="xalan-liaison">
        <echo message=" [minitest] Create Minitest report" />
        <!-- I also can't get the style task to work, even after putting 
             the optional.jar in various locations and/or explicitly adding 
             it to the classpath in build.bat.  More hints, anyone?
        -->
        <style processor="xalan"
               style="../viewResults.xsl"
               basedir="${results.dir}"
               destdir="${results.dir}"
               includes="Minitest.xml" />
    </target>
    <target name="minitest-pass" if="minitest-passed">
        <echo message=" [minitest] CONGRATULATIONS! The Minitest passed!" />
        <echo message=" [minitest] See details in ${results.html}" />
    </target>
    <!-- Note: avoid the use of 'fail' in the target name, in case 
         any log-grepping tools are searching for this -->
    <target name="minitest-not-pass" unless="minitest-passed">
        <echo message=" [minitest] ERROR! The Minitest failed!" />
        <echo message=" [minitest] See details in ${results.xml} or ${results.html}" />
        <echo message=" [minitest] Please fix any Minitest problems before checking in!" />
        <fail message="Please fix any Minitest problems before checking in!" />
    </target>


    <!-- =================================================================== -->
    <!-- Worker targets to compile and run the conformance test              -->
    <!-- NOTE: see various comments in minitest above - same kind of issues  -->
    <!-- =================================================================== -->
    <target name="conftest-xalan1" depends="compile.xsl"> 
        <echo message=" [conftest] SORRY! conftest.xalan1 is not implemented yet!" />
    </target>
    <!-- Note this conftest-xalan2 target as currently defined must 
         rely on both compile.xsl (for basic Reporter, etc. stuff as 
         well as various XSL* classes) as well as compile.xalan2
         (for the various TraxWrapper classes). We could eliminate 
         the compile.xalan2 target by explicitly compiling just 
         the TraxWrapper, etc. classes that we need, but that seems 
         like an awful lot of duplicated work.
    -->
    <target name="conftest-xalan2" depends="compile.xsl,compile.trax.xslwrappers" >
        <property name="conftest-results.dir" value="../results-conftest" />
        <property name="conftest-results.xml" value="${conftest-results.dir}/conf.xml" />
        <property name="conftest-results.html" value="${conftest-results.dir}/conf.html" />
        <property name="conftest-results.marker" value="${conftest-results.dir}/Pass-StylesheetTestletDriver.xml" />

        <!--  [conftest] Compile the ConformanceTest - already done by depends="compile.xsl" -->

        <echo message=" [conftest] Jar the ConformanceTest" />
        <jar jarfile="${build.dir}/${testxsl.jar.name}" 
             basedir="${build.dir}" 
             includes="**/*.class,**/*.properties" />

        <echo message=" [conftest] Run the ConformanceTest." />
        <java classname="org.apache.qetest.xsl.StylesheetTestletDriver"
              classpathref="runconftest.class.path"
              fork="${fork-tests}"
              failonerror="yes">
            <arg value="-inputDir" />
            <arg path="${tests.root}/conf" />
            <arg value="-goldDir" />
            <arg path="${tests.root}/conf-gold" />
            <arg value="-outputDir" />
            <arg path="${conftest-results.dir}" />
            <arg value="-logFile" />
            <arg path="${conftest-results.xml}" />
            <arg value="-loggingLevel" />
            <arg value="99" />
            <arg value="-ConsoleLogger.loggingLevel" />
            <arg value="20" />
            <arg value="-flavor" />
            <arg value="${test.flavor}" />
			<arg value="-excludes"/>
            <arg value="${test.excludes}" />
			<arg value="-embedded"/>
            <arg value="${test.embedded}" />
            <!-- Nice-to-have: simple way to specify -category foo 
                 here, so users could just run one directory of 
                 files. For now, you have to do that from the 
                 xml-xalan\test directory.
            -->
        </java>
        <!-- Set properties for running other targets -->
        <available file="${conftest-results.marker}" property="conftest-passed" />
    </target>

    <!-- Common worker targets for other conftest targets to call -->
    <!-- Note this could probably be combined with the minitest-report target -->
    <target name="conftest-report" if="xalan-liaison">
        <echo message=" [conftest] Create ConformanceTest report" />
        <style processor="xalan"
               style="../viewResults.xsl"
               basedir="${conftest-results.dir}"
               destdir="${conftest-results.dir}"
               includes="conf.xml" />
    </target>
    <target name="conftest-pass" if="conftest-passed">
        <echo message=" [conftest] CONGRATULATIONS! The ConformanceTest passed!" />
        <echo message=" [conftest] See details in ${conftest-results.html}" />
    </target>
    <!-- Note: avoid the use of 'fail' in the target name, in case 
         any log-grepping tools are searching for this -->
    <target name="conftest-not-pass" unless="conftest-passed">
        <echo message=" [conftest] ERROR! The ConformanceTest failed!" />
        <echo message=" [conftest] See details in ${conftest-results.xml} or ${conftest-results.html}" />
        <echo message=" [conftest] Please fix any ConformanceTest problems before checking in!" />
        <fail message="Please fix any ConformanceTest problems before checking in!" />
    </target>

    <!-- =================================================================== -->
    <!-- Worker targets to compile and run the examples test              -->
    <!-- =================================================================== -->
    <target name="apitests-xalan1" depends="compile.xsl"> 
        <echo message=" [apitests] SORRY! apitests.xalan1 is not implemented yet!" />
    </target>
    <target name="apitests-xalan2" depends="compile.trax" >
        <property name="known-good-apitests" 
                  value="trax.TemplatesAPITest;trax.TransformerAPITest;trax.TransformerFactoryAPITest;trax.stream.StreamResultAPITest;trax.stream.StreamSourceAPITest;trax.dom.DOMResultAPITest;trax.dom.DOMSourceAPITest;trax.sax.SAXResultAPITest;trax.sax.SAXSourceAPITest;trax.sax.SAXTransformerFactoryAPITest;trax.sax.TemplatesHandlerAPITest;trax.sax.TransformerHandlerAPITest;trax.SystemIdTest;trax.SystemIdImpInclTest;trax.EmbeddedStylesheetTest;trax.OutputPropertiesTest;trax.URIResolverTest;trax.ErrorListenerAPITest;trax.ErrorListenerTest;trax.ExamplesTest" />
        <property name="apitests-results.dir" value="../results-apitests" />
        <property name="apitests-results.xml" value="${apitests-results.dir}/Harness.xml" />
        <property name="apitests-results.html" value="${apitests-results.dir}/Harness.html" />
        <property name="apitests-results.marker" value="${apitests-results.dir}/Pass-Harness.xml" />

        <echo message=" [apitests] Jar the API Tests" />
        <jar jarfile="${build.dir}/${testxsl.jar.name}" 
             basedir="${build.dir}" 
             includes="**/*.class,**/*.properties" />

        <echo message=" [apitests] Run various API tests." />
        <java classname="org.apache.qetest.xsl.XSLTestHarness"
              classpathref="runapitests.class.path"
              fork="${fork-tests}"
              failonerror="no">
            <!-- Note that the harness simply takes a properties 
                 file to load options from, it does not parse 
                 command line args like other tests do. 
            -->
            <arg path="../apitests-xalan2.prop" />
        </java>
        <!-- Set properties for running other targets -->
        <available file="${apitests-results.marker}" property="apitests-passed" />
    </target>

    <!-- Common worker targets for other apitests targets to call -->
    <target name="apitests-report" if="xalan-liaison">
        <echo message=" [apitests] Create API tests report" />
        <style processor="xalan"
               style="../viewHarnessResults.xsl"
               basedir="${results.dir}"
               destdir="${results.dir}"
               includes="Harness.xml" />
    </target>
    <target name="apitests-pass" if="apitests-passed">
        <echo message=" [apitests] CONGRATULATIONS! The API tests passed!" />
        <echo message=" [apitests] See details in ${apitests-results.html}" />
    </target>
    <target name="apitests-not-pass" unless="apitests-passed">
        <echo message=" [apitests] ERROR! The API tests failed!" />
        <echo message=" [apitests] See details in ${apitests-results.xml} or ${apitests-results.html}" />
        <echo message=" [apitests] Please fix any API tests problems before checking in!" />
        <fail message="Please fix any API tests problems before checking in!" />
    </target>

    <!-- =================================================================== -->
    <!-- Run a general smoke test composed of other tests                    -->
    <!-- =================================================================== -->
	<target name="smoketest-xalan2" 
	        depends="conftest-xalan2, minitest-xalan2, apitests-xalan2, 
	        conftest-report,conftest-not-pass,conftest-pass,
	        minitest-report,minitest-not-pass,minitest-pass,
	        apitests-report,apitests-not-pass,apitests-pass"/>


    <!-- =================================================================== -->

    <!-- All wrappers; requires competitor's jars in the classpath, as appropriate
         (You may be better off compiling other wrappers by hand, and then simply 
         checking in their .class files instead) -->
    <target name="compile.xslwrapper.wrappers" depends="prepare">
        <javac srcdir="${test.dir}xslwrapper" 
                destdir="${build.dir}" 
                debug="${debug}" />
    </target>

    <target name="clean">
        <delete dir="${build.dir}"/>
		<delete dir="${xdocs.style}"/> <!--prepare.docs creates this tree-->
    </target>
	
    <!-- =================================================================== -->
    <!-- Creates the User's Guide                                            -->
    <!-- =================================================================== -->
    <target name="docs" depends="prepare.docs"
            description="Build the framework/overview docs for tests">
    <!-- Note: temporarily add the Xalan-J 1.x version of stylebook to classpath 
         this needs more work, since we can build docs with either Xalan 1 or 2, 
         but the matching version of stylebook needs to go with the xalan.jar -->
    <java fork="yes" classname="${doc.generator}"> 
        <classpath>
            <pathelement location="${xalan.xdocs}/stylebook-1.0-b2.jar" />
            <pathelement path="${java.class.path}" />
        </classpath>
        <arg line="targetDirectory=${build.docs} ${xdocs.book} ${xdocs.style}"/>    
    </java>
  </target>

    <!-- =================================================================== -->
    <!-- Creates the API documentation                                       -->
    <!-- =================================================================== -->
    <target name="javadocs" depends="prepare"
            description="Build the Javadocs for tests">
            
        <!-- Ant 1.2 ignores destdir arg if doclet is set, so must send to doclet in doclet subelement dleslie-->    
        <!-- But: Ant 1.3 fails if you *don't* provide destdir attr... curcuru-->    
        <javadoc
             classpath="${java.class.path};${xalan.build.dir}/xalan.jar;${xalan.build.dir}/xalanj1compat.jar"
             sourcepath="${src.dir}"
             packagenames="${javadocs.packages}"
             protected="true"
             author="true"
             version="true"
             use="true"
             windowtitle="${Name}" 
             doctitle="${Name}"
             bottom="${copyright}"
             destdir="${build.apidocs}">
               <doclet name="xalanjdoc.Standard" path="${xalan.bin.dir}/xalan2jdoc.jar">
                  <param name="-d" value="${build.apidocs}"/>
               </doclet>             
        </javadoc>
    </target>

</project>
