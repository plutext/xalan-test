<?xml version="1.0" standalone="no"?>
<!DOCTYPE s1 SYSTEM "sbk:/style/dtd/document.dtd">

<s1 title="Overview">
<ul>
<li><link anchor="purpose">Purpose of these tests</link></li>
<li><link anchor="dir-map">Directory Structure</link></li>
<li><link anchor="test-map">Listing of Java tests and drivers</link></li>
<li><link anchor="credits">Credits for the tests</link></li>
</ul>

    <anchor name="purpose"/>
    <s2 title="Purpose of these tests">
    <p>These tests are provided for Xalan contributors to evaluate the impact of code changes. 
    Run the tests on the unchanged code, make the change and rebuild. Then run the tests again 
    and compare the results. Results are automatically compared to the files in the "-gold" 
    directory trees. Even though not all tests have "gold" files, it's still valuable to run 
    the tests before and after a code change. That way you can at least ensure that 
    your changes didn't cause any regressions to the code before you check your 
    changes in. In the future, we hope to provide a tool to compare test results from 
    one run to another to make this process even simpler.</p>
    </s2>
      
    <anchor name="dir-map"/>
    <s2 title="Directory Structure">
    <gloss>
      <label>Brief overview of directory structure:</label>
      <label><code>xml-xalan/test</code></label>
      <item>Top level dir for all Xalan versions/products tests</item>
      <label></label>
      <label><code>xml-xalan/test/bin</code></label>
      <item>Java test automation dependencies (includes 
        <jump href="http://jakarta.apache.org/ant/index.html">Ant 1.2</jump>)</item>
      <label><code>xml-xalan/test/java/src</code></label>
      <item>Java test automation source tree - this includes 
      a generic testing framework as well as specific API tests for parts of Xalan 
      and several test drivers for testing conformance / performance / etc. over a large 
      number of xsl test stylesheets.
      <br/>Primary packages are:<br/>
      <jump href="apidocs/org/apache/qetest/package-summary.html">org.apache.qetest</jump><br/>
      <jump href="apidocs/org/apache/qetest/xsl/package-summary.html">org.apache.qetest.xsl</jump><br/>
      <jump href="apidocs/org/apache/qetest/trax/package-summary.html">org.apache.qetest.trax</jump><br/>
      <jump href="apidocs/org/apache/qetest/trax/dom/package-summary.html">org.apache.qetest.trax.dom</jump><br/>
      <jump href="apidocs/org/apache/qetest/trax/stream/package-summary.html">org.apache.qetest.trax.stream</jump><br/>
      <jump href="apidocs/org/apache/qetest/trax/sax/package-summary.html">org.apache.qetest.trax.sax</jump><br/>
      <jump href="apidocs/org/apache/qetest/xalanj2/package-summary.html">org.apache.qetest.xalanj2</jump><br/>
      <br/></item>
      <label><code>xml-xalan/test/tests</code></label><item>Top level for XSLT stylesheet trees and special API tests</item>
      <label><code>xml-xalan/test/tests/conf</code></label><item>Directory tree of specific conformance testing stylesheets</item>
      <label><code>xml-xalan/test/tests/conf-gold</code></label><item>Directory tree of specific conformance testing stylesheets gold 
      output reference files (this tree should mirror the structure of contrib)<br/></item>
      <label><code>xml-xalan/test/tests/contrib</code></label><item>Directory tree of user-contributed stylesheets</item>
      <label><code>xml-xalan/test/tests/contrib-gold</code></label><item>Directory tree of user-contributed stylesheets gold 
      output reference files (this tree should mirror the structure of contrib)<br/></item>
      <label><code>xml-xalan/test/tests/api</code></label><item>Directory tree for stylesheets used in Java API tests</item>
      <label><code>xml-xalan/test/tests/api/trax</code></label><item>Stylesheets used in Java API tests in 
      <jump href="apidocs/org/apache/qetest/trax/package-summary.html">org.apache.qetest.trax</jump></item>
      <label><code>xml-xalan/test/tests/api/trax/dom</code></label><item>Stylesheets used in Java API tests in 
      <jump href="apidocs/org/apache/qetest/trax/dom/package-summary.html">org.apache.qetest.trax.dom</jump></item>
      <label></label><item>etc. - often the directory tree in the stylesheet area
      will match the Java sources directory/package tree.</item>
      <label><code>xml-xalan/test/tests/api-gold</code></label><item>Matching Directory tree of gold files for Java API tests<br/></item>
      <label><code>xml-xalan/test/tests/extensions</code></label><item>Directory tree for stylesheets used in Xalan-specific extension tests</item>
      <label><code>xml-xalan/test/tests/extensions/java</code></label><item>Tests for extensions written in Java</item>
      <label><code>xml-xalan/test/tests/extensions/javascript</code></label><item>Tests for extensions written in Javascript</item>
      <label><code>xml-xalan/test/tests/extension-gold</code></label><item>Matching Directory tree of gold files for extensions tests<br/></item>
    </gloss>
    </s2>

    <anchor name="test-map"/>
    <s2 title="Listing of Java tests and drivers">
<p>Java Test Drivers (data driven testing</p>
<p>A Java Test Driver executes a test for each xml/xsl file pair in 
the specified directory tree or each pair in the specified fileList. 
For each test, the driver iterates over the tree or list of files 
and asks a Testlet to execute a test on each one.  This is also similar to 
data driven testing, where a common algorithim is defined for a test case, and 
then a large number of data points are run through the test case in order. 
The best example is <jump href="apidocs/org/apache/qetest/xsl/StylesheetTestletDriver.html">StylesheetTestletDriver</jump></p> 
<p>The Test Drivers rely on various Testlet implementations  
to define the actual testing algorithim to apply to each xml.xsl 
file pair.  This defines any options to be used when processing the 
file as well as logging out information about the test in progress.
Examples include 
<jump href="apidocs/org/apache/qetest/xsl/StylesheetTestlet.html">StylesheetTestlet</jump> and 
<jump href="apidocs/org/apache/qetest/xsl/PerformanceTestlet.html">PerformanceTestlet</jump></p>
<p>The Testlets rely on <jump href="apidocs/org/apache/qetest/xslwrapper/TransformWrapper.html">TransformWrapper</jump> 
subclasses to perform the actual test of processing or transformation 
of the xml.xsl file pair into the output file. We can then plug 
in different TransformWrapper "flavors" easily. Different 
TransformWrapper can process or transform in various ways, like 
using DOM trees, SAX events, or input/output streams.</p>
<p>The three levels of iteration, test algorithim, and 
processor flavor are all independently changeable, so we can 
easily try out different kinds of tests.</p>
<gloss>
<label>org.apache.qetest.xsl.<link idref="run" anchor="how-to-run-c">CConformanceTest</link></label>
<item>essentially the same as ConformanceTest, but for Xalan-C.  I plan to 
make this use the Testlet model soon to simplify this model, and 
to provide better support for differing command lines.</item>
</gloss>

<p>Java API tests for the TRAX (or javax.xml.transform) interface, that 
Xalan-J 2.x implements.<br/>
All in package: org.apache.qetest.trax</p>
<note>(Aug-01 Section needs updating: many new tests have been added -sc)</note>
<gloss>
<label>REPLACE_template_for_new_tests.java</label>
<item>a template for creating new TRAX API tests, see <link idref="submit" anchor="write-API-tests">Submitting New Tests</link></item>
<label>LoggingErrorListener.java</label>
<item><ref>utility:</ref> wraps javax.xml.transform.ErrorListener, and logs info; 
this class also supports setting expected errors to trap, and it will call 
logger.checkPass/checkFail for you when it gets an expected or unexpected event. 
This allows us to write very detailed negative tests and have them be 
fully automated.</item>
<label>LoggingURIResolver.java</label>
<item><ref>utility:</ref> wraps javax.xml.transform.URIResolver, and logs info</item>
<label>ExamplesTest.java</label>
<item>A testing version of samples/trax/Examples.java, a sample file
provided in Xalan-J 2.x showing various uses of the TRAX or 
javax.xml.transform API to process stylesheets.</item>
<label>TransformerAPITest.java</label>
<item>API coverage tests for javax.xml.transform.Transformer</item>
<label>TransformerFactoryAPITest.java</label>
<item>API coverage tests for javax.xml.transform.TransformerFactory</item>
<label>TemplatesAPITest.java</label>
<item>API coverage tests for javax.xml.transform.Templates</item>

<label>EmbeddedStylesheetTest.java</label>
<item>Testing various types and kinds of stylesheets embedded with the xml-stylesheet PI</item>
<label>ErrorListenerAPITest.java</label>
<item>API Coverage test for ErrorListener</item>
<label>ErrorListenerTest.java</label>
<item>Functionality test of error listeners when using illegal stylesheets</item>
<label>OutputPropertiesTest.java</label>
<item>Various tests of programmatic access and changing of output properties</item>
<label>SystemIdImpInclTest.java</label>
<item>Testing various forms of URLs in setSystemID with imported and included stylesheets</item>
<label>SystemIdTest.java</label>
<item>Testing various forms of URLs in setSystemID</item>


<label>TestThreads.java</label>
<item>MANUALLY executed test for running multiple threads 
and transforming multiple stylesheets simultaneously.</item>
</gloss>

<p>All in subpackages of: org.apache.qetest.trax</p>
<gloss>
<label>stream.StreamSourceAPITest.java</label>
<item>API coverage tests for javax.xml.transform.stream.StreamSource</item>
<label>stream.StreamResultAPITest.java</label>
<item>API coverage tests for javax.xml.transform.stream.StreamResult</item>

<label>dom.DOMSourceAPITest.java</label>
<item>API coverage tests for javax.xml.transform.dom.DOMSource</item>
<label>dom.DOMResultAPITest.java</label>
<item>API coverage tests for javax.xml.transform.dom.DOMResult</item>
<label>dom.DOMLocatorAPITest.java</label>
<item>API coverage tests for javax.xml.transform.dom.DOMLocator (@todo)</item>

<label>sax.SAXSourceAPITest.java (to be done)</label>
<item>API coverage tests for javax.xml.transform.sax.SAXSource</item>
<label>sax.SAXResultAPITest.java (to be done)</label>
<item>API coverage tests for javax.xml.transform.sax.SAXResult</item>
<label>sax.SAXTransformerFactoryAPITest.java (to be done)</label>
<item>API coverage tests for javax.xml.transform.sax.SAXTransformerFactory</item>
<label>sax.TemplatesHandlerAPITest.java (to be done)</label>
<item>API coverage tests for javax.xml.transform.sax.TemplatesHandler</item>
<label>sax.TransformerHandlerAPITest.java (to be done)</label>
<item>API coverage tests for javax.xml.transform.sax.TransformerHandler</item>
</gloss>


<p>Some tests are ones that Xalan has not passed to date, but we know the 
correct ("gold") result by analysis or by trying the test on other processors. 
A number of tests may also be missing matching "gold" files, if we haven't 
yet had time to confirm the correct output.  It's still useful to run these 
tests (although the ConformanceTest driver will report an AMBG or 'Ambiguous' 
result) because you can still see if the output looks basically correct, and 
compare the output to previous test runs before you submit your code changes, etc.</p>
<p>The tests have several different types of results beyond just pass or fail, 
which are documented in <jump href="apidocs/org/apache/qetest/Logger.html#PASS_RESULT">org.apache.qetest.Logger</jump>.
At Lotus/IBM, we have some additional test cases that we can't give away, so a 
patch may pass all these tests and fail others, but those cases should be rare.</p>

    </s2>

    <anchor name="credits"/>
    <s2 title="Credits for the tests">
      <ul>
        <li><jump href="mailto:shane_curcuru@lotus.com">Shane Curcuru</jump></li>
        <li><jump href="mailto:paul_dick@lotus.com">Paul Dick</jump></li>
        <li><jump href="mailto:David_Marston@lotus.com">David Marston</jump></li>
        <li><jump href="mailto:garyp@firstech.com">Gary L Peskin</jump></li>
        <li>Many other <jump href="http://xml.apache.org/mail.html">xalan-dev</jump> subscribers</li>
        <li>Many other helpers who we still need to credit! Sorry!</li>
      </ul>
    </s2>

</s1>